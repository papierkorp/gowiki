package CardCreator

templ CardCreatorInterfaceJavascript() {
    <script>
    document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('cardForm');
    const cardPreview = document.getElementById('cardPreview');
    const generatedHTML = document.getElementById('generatedHTML');
    const addMiddleContentBtn = document.getElementById('addMiddleContent');
    const middleContents = document.getElementById('middleContents');
    const middleContentTemplate = document.getElementById('middleContentTemplate');
    const copyHTMLBtn = document.getElementById('copyHTML');

    let middleContentCount = 0;


    function updatePreview() {
        const formData = new FormData(form);
        
        fetch('/plugins/CardCreator/update-preview', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(html => {
            cardPreview.innerHTML = html;
            generatedHTML.textContent = html;
        })
        .catch(error => console.error('Error:', error));
    }

    function generateBorderStyle(formData, prefix, index = '') {
        const sides = ['Top', 'Right', 'Bottom', 'Left'];
        const width = formData.get(`${prefix}BorderWidth${index}`);
        const style = formData.get(`${prefix}BorderStyle${index}`);
        const color = formData.get(`${prefix}BorderColor${index}`);
        const radius = formData.get(`${prefix}BorderRadius${index}`);

        let borderStyle = '';
        if (prefix === 'card') {
            sides.forEach(side => {
                if (formData.get(`${prefix}Border${side}`)) {
                    borderStyle += `border-${side.toLowerCase()}:${width}px ${style} ${color};`;
                }
            });
        } else {
            borderStyle = `border:${width}px ${style} ${color};`;
        }

        if (radius) {
            borderStyle += `border-radius:${radius}px;`;
        }

        return borderStyle;
    }

    function generateShadowStyle(formData, prefix, index = '') {
            const shadowEnabled = formData.get(`${prefix}Shadow${index}`);
            if (!shadowEnabled) return '';

            const offsetX = formData.get(`${prefix}ShadowOffsetX${index}`);
            const offsetY = formData.get(`${prefix}ShadowOffsetY${index}`);
            const blur = formData.get(`${prefix}ShadowBlur${index}`);
            const spread = formData.get(`${prefix}ShadowSpread${index}`);
            const opacity = formData.get(`${prefix}ShadowOpacity${index}`) / 100;
            const color = formData.get(`${prefix}ShadowColor${index}`);
            const inset = formData.get(`${prefix}ShadowInset${index}`) ? 'inset ' : '';

            const rgbaColor = hexToRGBA(color, opacity);

            return `box-shadow:${inset}${offsetX}px ${offsetY}px ${blur}px ${spread}px ${rgbaColor};`;
        }

        function hexToRGBA(hex, alpha) {
            const r = parseInt(hex.slice(1, 3), 16);
            const g = parseInt(hex.slice(3, 5), 16);
            const b = parseInt(hex.slice(5, 7), 16);
            return `rgba(${r}, ${g}, ${b}, ${alpha})`;
        }

        // Update shadow opacity display
        function updateShadowOpacityDisplay() {
            const opacityValue = this.nextElementSibling;
            if (opacityValue) {
                opacityValue.textContent = `${this.value}%`;
            }
        }

        // Add event listeners for shadow opacity inputs
    document.querySelectorAll('input[name$="ShadowOpacity"]').forEach(input => {
            input.addEventListener('input', () => updateShadowOpacityDisplay(input));
            updateShadowOpacityDisplay(input);
        });
    function addMiddleContentSection() {
        if (middleContentCount >= 4) {
            alert('You can only add up to 4 middle content sections.');
            return;
        }

        const newSection = middleContentTemplate.content.cloneNode(true);
        middleContents.appendChild(newSection);

        const lastSection = middleContents.lastElementChild;
        const typeSelect = lastSection.querySelector('select[name="middleContentType[]"]');
        const contentControls = lastSection.querySelector('.content-controls');

        typeSelect.addEventListener('change', function() {
            updateContentControls(this, contentControls);
        });

        lastSection.querySelector('.remove-middle-content').addEventListener('click', function() {
            middleContents.removeChild(lastSection);
            middleContentCount--;
            updatePreview();
        });

        lastSection.querySelector('input[name="middleContentShadow[]"]').addEventListener('change', function() {
            lastSection.querySelector('.middle-content-shadow-settings').style.display = this.checked ? 'block' : 'none';
        });

        // Add event listener for shadow opacity input
        const opacityInput = lastSection.querySelector('input[name="middleContentShadowOpacity[]"]');
        if (opacityInput) {
            opacityInput.addEventListener('input', updateShadowOpacityDisplay);
            updateShadowOpacityDisplay.call(opacityInput);
        }

        middleContentCount++;
        updateContentControls(typeSelect, contentControls);
        updatePreview();
    }

    function updateContentControls(typeSelect, controlsContainer) {
        const type = typeSelect.value;
        let controlsHTML = '';

        switch (type) {
            case 'text':
                controlsHTML = `
                    <textarea name="middleContentText[]" placeholder="Enter your text here" class="w-full p-2 border rounded"></textarea>
                    <div class="flex items-center mt-2">
                        <select name="middleContentFont[]" class="p-2 border rounded">
                            <option value="Roboto">Roboto</option>
                            <option value="Open Sans">Open Sans</option>
                            <option value="Lato">Lato</option>
                            <option value="Montserrat">Montserrat</option>
                            <option value="Poppins">Poppins</option>
                        </select>
                        <input type="number" name="middleContentFontSize[]" value="16" min="8" max="48" class="w-16 p-1 border rounded ml-2">
                        <input type="color" name="middleContentTextColor[]" value="#000000" class="ml-2">
                    </div>
                `;
                break;
            case 'image':
                controlsHTML = `
                    <input type="text" name="middleContentImageUrl[]" placeholder="Enter image URL" class="w-full p-2 border rounded">
                `;
                break;
            case 'list':
                controlsHTML = `
                    <textarea name="middleContentListItems[]" placeholder="Enter list items, one per line" class="w-full p-2 border rounded"></textarea>
                `;
                break;
            case 'table':
                controlsHTML = `
                    <textarea name="middleContentTableData[]" placeholder="Enter table data, comma-separated values, one row per line" class="w-full p-2 border rounded"></textarea>
                `;
                break;
        }

        controlsContainer.innerHTML = controlsHTML;
    }

        form.addEventListener('input', updatePreview);
        form.addEventListener('change', updatePreview);
        addMiddleContentBtn.addEventListener('click', addMiddleContentSection);

        copyHTMLBtn.addEventListener('click', function() {
            navigator.clipboard.writeText(generatedHTML.textContent)
                .then(() => alert('HTML copied to clipboard!'))
                .catch(err => console.error('Failed to copy: ', err));
        });

        // Initialize preview
        updatePreview();

        // Show/hide shadow settings and add opacity event listeners
        document.querySelectorAll('input[name$="Shadow"]').forEach(input => {
            const shadowSettings = input.closest('div').nextElementSibling;
            if (shadowSettings) {
                shadowSettings.style.display = input.checked ? 'block' : 'none';
                input.addEventListener('change', function() {
                    shadowSettings.style.display = this.checked ? 'block' : 'none';
                });

                const opacityInput = shadowSettings.querySelector('input[type="range"]');
                if (opacityInput) {
                    opacityInput.addEventListener('input', updateShadowOpacityDisplay);
                    updateShadowOpacityDisplay.call(opacityInput);
                }
            }
        });
    });
    </script>
}