// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package CardCreator

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func CardCreatorInterfaceJavascript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\r\n    document.addEventListener('DOMContentLoaded', function() {\r\n    const form = document.getElementById('cardForm');\r\n    const cardPreview = document.getElementById('cardPreview');\r\n    const generatedHTML = document.getElementById('generatedHTML');\r\n    const addMiddleContentBtn = document.getElementById('addMiddleContent');\r\n    const middleContents = document.getElementById('middleContents');\r\n    const middleContentTemplate = document.getElementById('middleContentTemplate');\r\n    const copyHTMLBtn = document.getElementById('copyHTML');\r\n\r\n    let middleContentCount = 0;\r\n\r\n\r\n    function updatePreview() {\r\n        const formData = new FormData(form);\r\n        \r\n        fetch('/plugins/CardCreator/update-preview', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(response => response.text())\r\n        .then(html => {\r\n            cardPreview.innerHTML = html;\r\n            generatedHTML.textContent = html;\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n\r\n    function generateBorderStyle(formData, prefix, index = '') {\r\n        const sides = ['Top', 'Right', 'Bottom', 'Left'];\r\n        const width = formData.get(`${prefix}BorderWidth${index}`);\r\n        const style = formData.get(`${prefix}BorderStyle${index}`);\r\n        const color = formData.get(`${prefix}BorderColor${index}`);\r\n        const radius = formData.get(`${prefix}BorderRadius${index}`);\r\n\r\n        let borderStyle = '';\r\n        if (prefix === 'card') {\r\n            sides.forEach(side => {\r\n                if (formData.get(`${prefix}Border${side}`)) {\r\n                    borderStyle += `border-${side.toLowerCase()}:${width}px ${style} ${color};`;\r\n                }\r\n            });\r\n        } else {\r\n            borderStyle = `border:${width}px ${style} ${color};`;\r\n        }\r\n\r\n        if (radius) {\r\n            borderStyle += `border-radius:${radius}px;`;\r\n        }\r\n\r\n        return borderStyle;\r\n    }\r\n\r\n    function generateShadowStyle(formData, prefix, index = '') {\r\n            const shadowEnabled = formData.get(`${prefix}Shadow${index}`);\r\n            if (!shadowEnabled) return '';\r\n\r\n            const offsetX = formData.get(`${prefix}ShadowOffsetX${index}`);\r\n            const offsetY = formData.get(`${prefix}ShadowOffsetY${index}`);\r\n            const blur = formData.get(`${prefix}ShadowBlur${index}`);\r\n            const spread = formData.get(`${prefix}ShadowSpread${index}`);\r\n            const opacity = formData.get(`${prefix}ShadowOpacity${index}`) / 100;\r\n            const color = formData.get(`${prefix}ShadowColor${index}`);\r\n            const inset = formData.get(`${prefix}ShadowInset${index}`) ? 'inset ' : '';\r\n\r\n            const rgbaColor = hexToRGBA(color, opacity);\r\n\r\n            return `box-shadow:${inset}${offsetX}px ${offsetY}px ${blur}px ${spread}px ${rgbaColor};`;\r\n        }\r\n\r\n        function hexToRGBA(hex, alpha) {\r\n            const r = parseInt(hex.slice(1, 3), 16);\r\n            const g = parseInt(hex.slice(3, 5), 16);\r\n            const b = parseInt(hex.slice(5, 7), 16);\r\n            return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n        }\r\n\r\n        // Update shadow opacity display\r\n        function updateShadowOpacityDisplay() {\r\n            const opacityValue = this.nextElementSibling;\r\n            if (opacityValue) {\r\n                opacityValue.textContent = `${this.value}%`;\r\n            }\r\n        }\r\n\r\n        // Add event listeners for shadow opacity inputs\r\n    document.querySelectorAll('input[name$=\"ShadowOpacity\"]').forEach(input => {\r\n            input.addEventListener('input', () => updateShadowOpacityDisplay(input));\r\n            updateShadowOpacityDisplay(input);\r\n        });\r\n    function addMiddleContentSection() {\r\n        if (middleContentCount >= 4) {\r\n            alert('You can only add up to 4 middle content sections.');\r\n            return;\r\n        }\r\n\r\n        const newSection = middleContentTemplate.content.cloneNode(true);\r\n        middleContents.appendChild(newSection);\r\n\r\n        const lastSection = middleContents.lastElementChild;\r\n        const typeSelect = lastSection.querySelector('select[name=\"middleContentType[]\"]');\r\n        const contentControls = lastSection.querySelector('.content-controls');\r\n\r\n        typeSelect.addEventListener('change', function() {\r\n            updateContentControls(this, contentControls);\r\n        });\r\n\r\n        lastSection.querySelector('.remove-middle-content').addEventListener('click', function() {\r\n            middleContents.removeChild(lastSection);\r\n            middleContentCount--;\r\n            updatePreview();\r\n        });\r\n\r\n        lastSection.querySelector('input[name=\"middleContentShadow[]\"]').addEventListener('change', function() {\r\n            lastSection.querySelector('.middle-content-shadow-settings').style.display = this.checked ? 'block' : 'none';\r\n        });\r\n\r\n        // Add event listener for shadow opacity input\r\n        const opacityInput = lastSection.querySelector('input[name=\"middleContentShadowOpacity[]\"]');\r\n        if (opacityInput) {\r\n            opacityInput.addEventListener('input', updateShadowOpacityDisplay);\r\n            updateShadowOpacityDisplay.call(opacityInput);\r\n        }\r\n\r\n        middleContentCount++;\r\n        updateContentControls(typeSelect, contentControls);\r\n        updatePreview();\r\n    }\r\n\r\n    function updateContentControls(typeSelect, controlsContainer) {\r\n        const type = typeSelect.value;\r\n        let controlsHTML = '';\r\n\r\n        switch (type) {\r\n            case 'text':\r\n                controlsHTML = `\r\n                    <textarea name=\"middleContentText[]\" placeholder=\"Enter your text here\" class=\"w-full p-2 border rounded\"></textarea>\r\n                    <div class=\"flex items-center mt-2\">\r\n                        <select name=\"middleContentFont[]\" class=\"p-2 border rounded\">\r\n                            <option value=\"Roboto\">Roboto</option>\r\n                            <option value=\"Open Sans\">Open Sans</option>\r\n                            <option value=\"Lato\">Lato</option>\r\n                            <option value=\"Montserrat\">Montserrat</option>\r\n                            <option value=\"Poppins\">Poppins</option>\r\n                        </select>\r\n                        <input type=\"number\" name=\"middleContentFontSize[]\" value=\"16\" min=\"8\" max=\"48\" class=\"w-16 p-1 border rounded ml-2\">\r\n                        <input type=\"color\" name=\"middleContentTextColor[]\" value=\"#000000\" class=\"ml-2\">\r\n                    </div>\r\n                `;\r\n                break;\r\n            case 'image':\r\n                controlsHTML = `\r\n                    <input type=\"text\" name=\"middleContentImageUrl[]\" placeholder=\"Enter image URL\" class=\"w-full p-2 border rounded\">\r\n                `;\r\n                break;\r\n            case 'list':\r\n                controlsHTML = `\r\n                    <textarea name=\"middleContentListItems[]\" placeholder=\"Enter list items, one per line\" class=\"w-full p-2 border rounded\"></textarea>\r\n                `;\r\n                break;\r\n            case 'table':\r\n                controlsHTML = `\r\n                    <textarea name=\"middleContentTableData[]\" placeholder=\"Enter table data, comma-separated values, one row per line\" class=\"w-full p-2 border rounded\"></textarea>\r\n                `;\r\n                break;\r\n        }\r\n\r\n        controlsContainer.innerHTML = controlsHTML;\r\n    }\r\n\r\n        form.addEventListener('input', updatePreview);\r\n        form.addEventListener('change', updatePreview);\r\n        addMiddleContentBtn.addEventListener('click', addMiddleContentSection);\r\n\r\n        copyHTMLBtn.addEventListener('click', function() {\r\n            navigator.clipboard.writeText(generatedHTML.textContent)\r\n                .then(() => alert('HTML copied to clipboard!'))\r\n                .catch(err => console.error('Failed to copy: ', err));\r\n        });\r\n\r\n        // Initialize preview\r\n        updatePreview();\r\n\r\n        // Show/hide shadow settings and add opacity event listeners\r\n        document.querySelectorAll('input[name$=\"Shadow\"]').forEach(input => {\r\n            const shadowSettings = input.closest('div').nextElementSibling;\r\n            if (shadowSettings) {\r\n                shadowSettings.style.display = input.checked ? 'block' : 'none';\r\n                input.addEventListener('change', function() {\r\n                    shadowSettings.style.display = this.checked ? 'block' : 'none';\r\n                });\r\n\r\n                const opacityInput = shadowSettings.querySelector('input[type=\"range\"]');\r\n                if (opacityInput) {\r\n                    opacityInput.addEventListener('input', updateShadowOpacityDisplay);\r\n                    updateShadowOpacityDisplay.call(opacityInput);\r\n                }\r\n            }\r\n        });\r\n    });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
